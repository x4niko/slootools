{"version":3,"sources":["webpack:///src/components/ColorConversion.vue","webpack:///./src/components/ColorConversion.vue?d340","webpack:///./src/components/ColorConversion.vue","webpack:///./node_modules/tinycolor2/tinycolor.js"],"names":["ColorConversion","name","data","msg","hexVaule","rgbResult","rVaule","gVaule","bVaule","hexResult","methods","convertToRgb","event","color","tinycolor_default","this","toRgbString","convertToHex","rgbString","toHex","components_ColorConversion","render","_vm","_h","$createElement","_c","_self","staticClass","_v","_s","directives","rawName","value","expression","attrs","type","domProps","on","input","$event","target","composing","click","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__","__WEBPACK_AMD_DEFINE_RESULT__","Math","trimLeft","trimRight","tinyCounter","mathRound","round","mathMin","min","mathMax","max","mathRandom","random","tinycolor","opts","rgb","r","g","b","a","s","v","l","ok","format","replace","toLowerCase","match","named","names","matchers","exec","rgba","hsl","h","hsla","hsv","hsva","hex8","parseIntFromHex","convertHexToDecimal","hex6","hex4","hex3","stringInputToObject","isValidCSSUnit","bound01","String","substr","convertToPercentage","i","floor","f","p","q","t","mod","hsvToRgb","hue2rgb","hslToRgb","hasOwnProperty","boundAlpha","inputToRGB","_originalInput","_r","_g","_b","_a","_roundA","_format","_gradientType","gradientType","_ok","_tc_id","rgbToHsl","d","rgbToHsv","rgbToHex","allow3Char","hex","pad2","toString","charAt","join","rgbaToArgbHex","convertDecimalToHex","desaturate","amount","toHsl","clamp01","saturate","greyscale","lighten","brighten","toRgb","darken","spin","hue","complement","triad","tetrad","splitcomplement","analogous","results","slices","part","ret","push","monochromatic","toHsv","modification","prototype","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","pow","setAlpha","toHsvString","toHslString","toHexString","toHex8","allow4Char","rgbaToHex","toHex8String","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","clone","_applyModification","fn","args","apply","concat","slice","call","arguments","_applyCombination","fromRatio","newColor","equals","color1","color2","mix","rgb1","rgb2","readability","c1","c2","isReadable","wcag2","wcag2Parms","out","parms","level","size","toUpperCase","validateWCAG2Parms","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","length","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","o","flipped","flip","parseFloat","isNaN","n","indexOf","isOnePointZero","processPercent","isPercentage","parseInt","abs","val","c","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","module","exports","undefined"],"mappings":"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","file":"static/js/3.6d555e12ec24bcb432fe.js","sourcesContent":["<template>\n  <div class=\"colorConversion\">\n    <h1>{{ msg }}</h1>\n    <br/>\n    十六进制颜色码转换成RGB颜色值：<br>\n    <input class=\"form-control\" type=\"text\" v-model=\"hexVaule\">\n    <button v-on:click=\"convertToRgb\">转换</button>\n    <b>{{ rgbResult }}</b>\n    <br>\n    <br>\n    RGB颜色值转换成十六进制颜色码：<br>\n    <input class=\"form-control\" type=\"text\" v-model=\"rVaule\">\n    <input class=\"form-control\" type=\"text\" v-model=\"gVaule\">\n    <input class=\"form-control\" type=\"text\" v-model=\"bVaule\">\n    <button v-on:click=\"convertToHex\">转换</button>\n    <b>{{ hexResult }}</b>\n  </div>\n</template>\n\n<script>\nimport tinycolor from 'tinycolor2'\n\nexport default {\n  name: 'ColorConversion',\n  data () {\n    return {\n      msg: '颜色转换',\n      hexVaule: '#888888',\n      rgbResult: 'rgb(136, 136, 136)',\n      rVaule: '255',\n      gVaule: '255',\n      bVaule: '255',\n      hexResult: '#ffffff'\n    }\n  },\n  methods: {\n    convertToRgb: function (event) {\n      var color = tinycolor(this.hexVaule)\n      this.rgbResult = color.toRgbString()\n    },\n    convertToHex: function (event) {\n      var rgbString = 'rgb(' + this.rVaule + ', ' + this.gVaule + ', ' + this.bVaule + ')'\n      var color = tinycolor(rgbString)\n      this.hexResult = '#' + color.toHex()\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.colorConversion {\n  margin: 20px;\n}\n\nh1, h2 {\n  font-weight: normal;\n}\n\ninput {\n  width: 100px;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/ColorConversion.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"colorConversion\"},[_c('h1',[_vm._v(_vm._s(_vm.msg))]),_vm._v(\" \"),_c('br'),_vm._v(\"\\n  十六进制颜色码转换成RGB颜色值：\"),_c('br'),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.hexVaule),expression:\"hexVaule\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\"},domProps:{\"value\":(_vm.hexVaule)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.hexVaule=$event.target.value}}}),_vm._v(\" \"),_c('button',{on:{\"click\":_vm.convertToRgb}},[_vm._v(\"转换\")]),_vm._v(\" \"),_c('b',[_vm._v(_vm._s(_vm.rgbResult))]),_vm._v(\" \"),_c('br'),_vm._v(\" \"),_c('br'),_vm._v(\"\\n  RGB颜色值转换成十六进制颜色码：\"),_c('br'),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.rVaule),expression:\"rVaule\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\"},domProps:{\"value\":(_vm.rVaule)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.rVaule=$event.target.value}}}),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.gVaule),expression:\"gVaule\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\"},domProps:{\"value\":(_vm.gVaule)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.gVaule=$event.target.value}}}),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.bVaule),expression:\"bVaule\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\"},domProps:{\"value\":(_vm.bVaule)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.bVaule=$event.target.value}}}),_vm._v(\" \"),_c('button',{on:{\"click\":_vm.convertToHex}},[_vm._v(\"转换\")]),_vm._v(\" \"),_c('b',[_vm._v(_vm._s(_vm.hexResult))])])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-47d386ca\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/ColorConversion.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true,\\\"publicPath\\\":\\\"../../\\\"}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-47d386ca\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./ColorConversion.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./ColorConversion.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./ColorConversion.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-47d386ca\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./ColorConversion.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-47d386ca\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/ColorConversion.vue\n// module id = null\n// module chunks = ","// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tinycolor2/tinycolor.js\n// module id = YrBu\n// module chunks = 3"],"sourceRoot":""}